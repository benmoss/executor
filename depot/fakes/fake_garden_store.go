// This file was generated by counterfeiter
package fakes

import (
	"io"
	"sync"

	"github.com/cloudfoundry-incubator/executor"
	"github.com/cloudfoundry-incubator/executor/depot"
	"github.com/pivotal-golang/lager"
)

type FakeGardenStore struct {
	CreateStub        func(logger lager.Logger, container executor.Container) (executor.Container, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		logger    lager.Logger
		container executor.Container
	}
	createReturns struct {
		result1 executor.Container
		result2 error
	}
	LookupStub        func(logger lager.Logger, guid string) (executor.Container, error)
	lookupMutex       sync.RWMutex
	lookupArgsForCall []struct {
		logger lager.Logger
		guid   string
	}
	lookupReturns struct {
		result1 executor.Container
		result2 error
	}
	ListStub        func(logger lager.Logger, tags executor.Tags) ([]executor.Container, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		logger lager.Logger
		tags   executor.Tags
	}
	listReturns struct {
		result1 []executor.Container
		result2 error
	}
	MetricsStub        func(logger lager.Logger, guid []string) (map[string]executor.ContainerMetrics, error)
	metricsMutex       sync.RWMutex
	metricsArgsForCall []struct {
		logger lager.Logger
		guid   []string
	}
	metricsReturns struct {
		result1 map[string]executor.ContainerMetrics
		result2 error
	}
	DestroyStub        func(logger lager.Logger, guid string) error
	destroyMutex       sync.RWMutex
	destroyArgsForCall []struct {
		logger lager.Logger
		guid   string
	}
	destroyReturns struct {
		result1 error
	}
	PingStub        func() error
	pingMutex       sync.RWMutex
	pingArgsForCall []struct{}
	pingReturns struct {
		result1 error
	}
	RunStub        func(logger lager.Logger, container executor.Container) error
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		logger    lager.Logger
		container executor.Container
	}
	runReturns struct {
		result1 error
	}
	StopStub        func(logger lager.Logger, guid string) error
	stopMutex       sync.RWMutex
	stopArgsForCall []struct {
		logger lager.Logger
		guid   string
	}
	stopReturns struct {
		result1 error
	}
	GetFilesStub        func(logger lager.Logger, guid, sourcePath string) (io.ReadCloser, error)
	getFilesMutex       sync.RWMutex
	getFilesArgsForCall []struct {
		logger     lager.Logger
		guid       string
		sourcePath string
	}
	getFilesReturns struct {
		result1 io.ReadCloser
		result2 error
	}
}

func (fake *FakeGardenStore) Create(logger lager.Logger, container executor.Container) (executor.Container, error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		logger    lager.Logger
		container executor.Container
	}{logger, container})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(logger, container)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *FakeGardenStore) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeGardenStore) CreateArgsForCall(i int) (lager.Logger, executor.Container) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].logger, fake.createArgsForCall[i].container
}

func (fake *FakeGardenStore) CreateReturns(result1 executor.Container, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 executor.Container
		result2 error
	}{result1, result2}
}

func (fake *FakeGardenStore) Lookup(logger lager.Logger, guid string) (executor.Container, error) {
	fake.lookupMutex.Lock()
	fake.lookupArgsForCall = append(fake.lookupArgsForCall, struct {
		logger lager.Logger
		guid   string
	}{logger, guid})
	fake.lookupMutex.Unlock()
	if fake.LookupStub != nil {
		return fake.LookupStub(logger, guid)
	} else {
		return fake.lookupReturns.result1, fake.lookupReturns.result2
	}
}

func (fake *FakeGardenStore) LookupCallCount() int {
	fake.lookupMutex.RLock()
	defer fake.lookupMutex.RUnlock()
	return len(fake.lookupArgsForCall)
}

func (fake *FakeGardenStore) LookupArgsForCall(i int) (lager.Logger, string) {
	fake.lookupMutex.RLock()
	defer fake.lookupMutex.RUnlock()
	return fake.lookupArgsForCall[i].logger, fake.lookupArgsForCall[i].guid
}

func (fake *FakeGardenStore) LookupReturns(result1 executor.Container, result2 error) {
	fake.LookupStub = nil
	fake.lookupReturns = struct {
		result1 executor.Container
		result2 error
	}{result1, result2}
}

func (fake *FakeGardenStore) List(logger lager.Logger, tags executor.Tags) ([]executor.Container, error) {
	fake.listMutex.Lock()
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		logger lager.Logger
		tags   executor.Tags
	}{logger, tags})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub(logger, tags)
	} else {
		return fake.listReturns.result1, fake.listReturns.result2
	}
}

func (fake *FakeGardenStore) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeGardenStore) ListArgsForCall(i int) (lager.Logger, executor.Tags) {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return fake.listArgsForCall[i].logger, fake.listArgsForCall[i].tags
}

func (fake *FakeGardenStore) ListReturns(result1 []executor.Container, result2 error) {
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 []executor.Container
		result2 error
	}{result1, result2}
}

func (fake *FakeGardenStore) Metrics(logger lager.Logger, guid []string) (map[string]executor.ContainerMetrics, error) {
	fake.metricsMutex.Lock()
	fake.metricsArgsForCall = append(fake.metricsArgsForCall, struct {
		logger lager.Logger
		guid   []string
	}{logger, guid})
	fake.metricsMutex.Unlock()
	if fake.MetricsStub != nil {
		return fake.MetricsStub(logger, guid)
	} else {
		return fake.metricsReturns.result1, fake.metricsReturns.result2
	}
}

func (fake *FakeGardenStore) MetricsCallCount() int {
	fake.metricsMutex.RLock()
	defer fake.metricsMutex.RUnlock()
	return len(fake.metricsArgsForCall)
}

func (fake *FakeGardenStore) MetricsArgsForCall(i int) (lager.Logger, []string) {
	fake.metricsMutex.RLock()
	defer fake.metricsMutex.RUnlock()
	return fake.metricsArgsForCall[i].logger, fake.metricsArgsForCall[i].guid
}

func (fake *FakeGardenStore) MetricsReturns(result1 map[string]executor.ContainerMetrics, result2 error) {
	fake.MetricsStub = nil
	fake.metricsReturns = struct {
		result1 map[string]executor.ContainerMetrics
		result2 error
	}{result1, result2}
}

func (fake *FakeGardenStore) Destroy(logger lager.Logger, guid string) error {
	fake.destroyMutex.Lock()
	fake.destroyArgsForCall = append(fake.destroyArgsForCall, struct {
		logger lager.Logger
		guid   string
	}{logger, guid})
	fake.destroyMutex.Unlock()
	if fake.DestroyStub != nil {
		return fake.DestroyStub(logger, guid)
	} else {
		return fake.destroyReturns.result1
	}
}

func (fake *FakeGardenStore) DestroyCallCount() int {
	fake.destroyMutex.RLock()
	defer fake.destroyMutex.RUnlock()
	return len(fake.destroyArgsForCall)
}

func (fake *FakeGardenStore) DestroyArgsForCall(i int) (lager.Logger, string) {
	fake.destroyMutex.RLock()
	defer fake.destroyMutex.RUnlock()
	return fake.destroyArgsForCall[i].logger, fake.destroyArgsForCall[i].guid
}

func (fake *FakeGardenStore) DestroyReturns(result1 error) {
	fake.DestroyStub = nil
	fake.destroyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGardenStore) Ping() error {
	fake.pingMutex.Lock()
	fake.pingArgsForCall = append(fake.pingArgsForCall, struct{}{})
	fake.pingMutex.Unlock()
	if fake.PingStub != nil {
		return fake.PingStub()
	} else {
		return fake.pingReturns.result1
	}
}

func (fake *FakeGardenStore) PingCallCount() int {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	return len(fake.pingArgsForCall)
}

func (fake *FakeGardenStore) PingReturns(result1 error) {
	fake.PingStub = nil
	fake.pingReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGardenStore) Run(logger lager.Logger, container executor.Container) error {
	fake.runMutex.Lock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		logger    lager.Logger
		container executor.Container
	}{logger, container})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(logger, container)
	} else {
		return fake.runReturns.result1
	}
}

func (fake *FakeGardenStore) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeGardenStore) RunArgsForCall(i int) (lager.Logger, executor.Container) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].logger, fake.runArgsForCall[i].container
}

func (fake *FakeGardenStore) RunReturns(result1 error) {
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGardenStore) Stop(logger lager.Logger, guid string) error {
	fake.stopMutex.Lock()
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct {
		logger lager.Logger
		guid   string
	}{logger, guid})
	fake.stopMutex.Unlock()
	if fake.StopStub != nil {
		return fake.StopStub(logger, guid)
	} else {
		return fake.stopReturns.result1
	}
}

func (fake *FakeGardenStore) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *FakeGardenStore) StopArgsForCall(i int) (lager.Logger, string) {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return fake.stopArgsForCall[i].logger, fake.stopArgsForCall[i].guid
}

func (fake *FakeGardenStore) StopReturns(result1 error) {
	fake.StopStub = nil
	fake.stopReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGardenStore) GetFiles(logger lager.Logger, guid string, sourcePath string) (io.ReadCloser, error) {
	fake.getFilesMutex.Lock()
	fake.getFilesArgsForCall = append(fake.getFilesArgsForCall, struct {
		logger     lager.Logger
		guid       string
		sourcePath string
	}{logger, guid, sourcePath})
	fake.getFilesMutex.Unlock()
	if fake.GetFilesStub != nil {
		return fake.GetFilesStub(logger, guid, sourcePath)
	} else {
		return fake.getFilesReturns.result1, fake.getFilesReturns.result2
	}
}

func (fake *FakeGardenStore) GetFilesCallCount() int {
	fake.getFilesMutex.RLock()
	defer fake.getFilesMutex.RUnlock()
	return len(fake.getFilesArgsForCall)
}

func (fake *FakeGardenStore) GetFilesArgsForCall(i int) (lager.Logger, string, string) {
	fake.getFilesMutex.RLock()
	defer fake.getFilesMutex.RUnlock()
	return fake.getFilesArgsForCall[i].logger, fake.getFilesArgsForCall[i].guid, fake.getFilesArgsForCall[i].sourcePath
}

func (fake *FakeGardenStore) GetFilesReturns(result1 io.ReadCloser, result2 error) {
	fake.GetFilesStub = nil
	fake.getFilesReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

var _ depot.GardenStore = new(FakeGardenStore)
